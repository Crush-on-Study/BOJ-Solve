# C++로 풀었던 문제지만, 파이썬으로 재도전
# 아이디어는 크게 없으며 그냥 조건대로 풀이하고자 함
# 결과 : 무한루프 (실패)
# 핵심 스킬 포인트 : 방향회전 및 좌표 갱신이 가장 중요했음. 방향회전은 (d+3)%4을 통해 4방향 회전이 끊이지 않도록함
# 좌표 갱신은 매순간 명령이 끝날 때마다 좌표를 꾸준히 갱신해줘야 함
# 무한루프 난 자리는 내가 습관적으로 visited를 모두 False로 처리함. 벽인 부분까지 False로 처리했다.
# 외우다시피 무의식적으로 짜지말자. 좋지 않은 버릇이다.


import sys
input = sys.stdin.readline

N,M = map(int,input().rstrip().split()) # N은 세로 M은 가로
r,c,d = map(int,input().rstrip().split()) # r,c는 y,x좌표고 d는 바라보는 방향
graph = [list(map(int,input().rstrip().split())) for _ in range(N)] # 그래프 정보
visited = [[False]*M for _ in range(N)] # 경로 방문 기록

dr = [0,1,0,-1]  # 북 0 / 동 1 / 남 2 / 서 3
dc = [1,0,-1,0]
visited[r][c] = True # 현재 위치 청소
cnt = 1

while True:
    nr = r+dr[(d+3)%4] # 왼쪽으로 고개 돌리기
    nc = c+dc[(d+3)%4]
    
    if 0<=nr<N and 0<=nc<M: # 1번 조건 : 왼쪽 방향에 아직 청소하지 않은 공간 존재
        if not visited[nr][nc] and graph[nr][nc] == 0:
            visited[nr][nc] = True
            cnt+=1
            r = nr
            c = nc  # 위치 갱신
            
    if 0>nr or nr>=N or 0>nc or nc>=M: # 2번 조건 왼쪽 방향에 청소할 공간 X, 그럼 회전하고 다시 돌아가
        r = nr
        c = nc # 위치 갱신
            
    if 0<=nr<N and 0<=nc<M: # 3번 조건 4방향 모두 청소 or 벽을 마주함
        if graph[nr][nc] == 1 or visited[nr][nc] == True:
            nr = r-dr[d] # 고개 돌리지말고 그대로 뒤로 한칸 후진
            nc = c-dc[d]
            r = nr
            c = nc
            
    if 0<=nr<N and 0<=nc<M:  # 4번 조건  4방향 모두 청소 완료 and 이동 불가
        if graph[nr][nc] == 1 and visited[nr][nc] == True:
            break
        
print(cnt)
